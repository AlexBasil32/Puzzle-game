{"version":3,"sources":["image-puzzle.js"],"names":["imagePuzzle","stepCount","images","gridSize","startGame","log","console","$","setImage","show","this","enableSwapping","elem","draggable","snapMode","helper","droppable","event","ui","$dragElem","clone","replaceAll","currentList","map","i","el","attr","empty","html","percentage","image","Math","floor","random","title","length","src","xpos","ypos","li","css","background-image","background-size","background-position","width","height","append","randomize","isSorted","arr","fn","selector","find","children","parent","$parents","$elems","sort","remove","round"],"mappings":"aACA,IAAIA,YAAc,CAAdA,UAAW,EACXC,UADc,SAAAC,EAAAC,GAEdC,QAAWC,IAAAF,GACPG,KAAQD,SAAIF,EAAZA,GACAI,EAAKC,cAALC,OACEF,EAAA,aAAcE,YACdC,KAAAC,eAAF,gBACAD,KAAKC,UAAe,GAPVA,eAAA,SAAAC,GAUdD,EAAAA,GAAcE,UAAE,CACJA,KAAAA,aACEC,SAAA,QACNA,OAAU,UACJC,OAAE,UAHZR,EAAAK,GAAAI,UAAA,CAMQA,KAAAA,SAAUC,EAAAC,GACR,IAAAC,EAAAZ,EAAiBW,EAAIL,WAAAO,QAAAC,WAAAX,MACnBS,EAAAA,MAAYZ,WAAKM,EAAJA,WAGjBS,YAAgBf,EAAA,kBAAsBgB,IAAA,SAAiBC,EAAAC,GAAA,OAAAlB,EAAAkB,GAAAC,KAAA,gBAAWD,SAASH,aAA3Ef,EAAA,mBAAAoB,QAAAC,KAAArB,EAAA,aAAAqB,SAII5B,YAAAC,YACEM,EAAA,cAAmBP,KAAAA,YAArBC,YAIJD,YAAYW,eAAeQ,MAC9BnB,YAAAW,eAAAQ,OAMLhB,SAAQ,SAAWD,EAAOC,GAD1BG,QAAQD,IAAIF,GAEZG,EAAYH,GAAZ,EACI0B,QAAAA,IAAU1B,GACV2B,IAAAA,EAAeC,KAAKC,EAAWC,GACjCH,EAAaF,EAAKE,KAAMI,MAA1BH,KAAAE,SAAA/B,EAAAiC,SACE5B,EAAA,aAAgBmB,KAAKI,EAAOA,OAC5BvB,EAAA,gBAAFmB,KAAA,MAAAI,EAAAM,KAAA7B,EAAE,aAAaoB,QACf,IAASH,IAAIA,EAAI,EAAGrB,EAAAA,EAAWA,EAA/BqB,IAA8C,CACtCa,IAAIA,EAAsBlC,EAAAA,EAAlB0B,EAAZ,IACQS,EAAIT,EAAkBG,KAAOA,MAAG7B,EAAAA,GAAxC,IACUoC,EAAChC,EAAA,gCAAwCiB,EAAA,WAAegB,IAAA,CAC9DC,mBAAoB,OAAeL,EAAMA,IADqB,IAE9DM,kBAF8D,IAElCvC,EAFkC,IAG9DwC,sBAA8BN,EAAMC,IAH0BA,EAI9DM,MAAezC,IAJ+CA,EAK9D0C,OAAe1C,IAAAA,IAEjBI,EAAA,aAAFuC,OAAAP,GAEJhC,EAAE,aAAawC,cAIvB,SAASC,SAASC,GAAlB,IAASD,IAAAA,EAAT,EAAkBC,EAAKA,EAAAd,OAAA,EAAAX,IACd,GAAKyB,EAAVzB,IAAoByB,EACRzB,OAAR,EAGJ,OAAO,EACVjB,EAAA2C,GAAAH,UAAA,SAAAI,GAKG,OAHaA,EAAW5C,EAAEG,MAAM0C,KAAKD,GAAY5C,EAAEG,MAAM2C,YAD5CC,SAETC,KAAWC,WAEfD,EAAQ7C,MAAM2C,SAAAF,GAAYM,KAAA,WACdJ,OAAAA,KAASF,MAAjBpB,KAAAE,UAAgC,KAC5ByB,SAAYC,SAAW1B,QAF/BvB","file":"image-puzzle.min.js","sourcesContent":["\nvar imagePuzzle = {\n    stepCount: 0,\n    startGame: function (images, gridSize) {\n        console.log(gridSize);\n        this.setImage(images, gridSize);\n        $('#playPanel').show();\n        $('#sortable').randomize();\n        this.enableSwapping('#sortable li');\n        this.stepCount = 0;\n    },\n    enableSwapping: function (elem) {\n        $(elem).draggable({\n            snap: '#droppable',\n            snapMode: 'outer',\n            revert: \"invalid\",\n            helper: \"clone\"\n        });\n        $(elem).droppable({\n            drop: function (event, ui) {\n                var $dragElem = $(ui.draggable).clone().replaceAll(this);\n                $(this).replaceAll(ui.draggable);\n\n                currentList = $('#sortable > li').map(function (i, el) { return $(el).attr('data-value'); });\n                if (isSorted(currentList))\n                    $('#actualImageBox').empty().html($('#gameOver').html());\n                else {\n                    imagePuzzle.stepCount++;\n                    $('.stepCount').text(imagePuzzle.stepCount);\n                }\n\n                imagePuzzle.enableSwapping(this);\n                imagePuzzle.enableSwapping($dragElem);\n            }\n        });\n    },\n\n    setImage: function (images, gridSize) {\n        console.log(gridSize);\n        gridSize = gridSize || 8; // If gridSize is null or not passed, default it as 4.\n        console.log(gridSize);\n        var percentage = 100 / (gridSize - 1);\n        var image = images[Math.floor(Math.random() * images.length)];\n        $('#imgTitle').html(image.title);\n        $('#actualImage').attr('src', image.src);\n        $('#sortable').empty();\n        for (var i = 0; i < gridSize * gridSize; i++) {\n            var xpos = (percentage * (i % gridSize)) + '%';\n            var ypos = (percentage * Math.floor(i / gridSize)) + '%';\n            var li = $('<li class=\"item\" data-value=\"' + (i) + '\"></li>').css({\n                'background-image': 'url(' + image.src + ')',\n                'background-size': (gridSize * 100) + '%',\n                'background-position': xpos + ' ' + ypos,\n                'width': 700 / gridSize,\n                'height': 640/ gridSize\n            });\n            $('#sortable').append(li);\n        }\n        $('#sortable').randomize();\n    }\n};\n\nfunction isSorted(arr) {\n    for (var i = 0; i < arr.length - 1; i++) {\n        if (arr[i] != i)\n            return false;\n    }\n    return true;\n}\n$.fn.randomize = function (selector) {\n    var $elems = selector ? $(this).find(selector) : $(this).children(),\n        $parents = $elems.parent();\n\n    $parents.each(function () {\n        $(this).children(selector).sort(function () {\n            return Math.round(Math.random()) - 0.5;\n        }).remove().appendTo(this);\n    });\n    return this;\n};"]}