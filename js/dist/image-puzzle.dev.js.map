{"version":3,"sources":["image-puzzle.js"],"names":["imagePuzzle","stepCount","startGame","images","gridSize","console","log","setImage","$","show","randomize","enableSwapping","elem","draggable","snap","snapMode","revert","helper","droppable","drop","event","ui","$dragElem","clone","replaceAll","currentList","map","i","el","attr","isSorted","empty","html","text","percentage","image","Math","floor","random","length","title","src","xpos","ypos","li","css","append","arr","fn","selector","$elems","find","children","$parents","parent","each","sort","round","remove","appendTo"],"mappings":"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","sourcesContent":["\nvar imagePuzzle = {\n    stepCount: 0,\n    startGame: function (images, gridSize) {\n        console.log(gridSize);\n        this.setImage(images, gridSize);\n        $('#playPanel').show();\n        $('#sortable').randomize();\n        this.enableSwapping('#sortable li');\n        this.stepCount = 0;\n    },\n    enableSwapping: function (elem) {\n        $(elem).draggable({\n            snap: '#droppable',\n            snapMode: 'outer',\n            revert: \"invalid\",\n            helper: \"clone\"\n        });\n        $(elem).droppable({\n            drop: function (event, ui) {\n                var $dragElem = $(ui.draggable).clone().replaceAll(this);\n                $(this).replaceAll(ui.draggable);\n\n                currentList = $('#sortable > li').map(function (i, el) { return $(el).attr('data-value'); });\n                if (isSorted(currentList))\n                    $('#actualImageBox').empty().html($('#gameOver').html());\n                else {\n                    imagePuzzle.stepCount++;\n                    $('.stepCount').text(imagePuzzle.stepCount);\n                }\n\n                imagePuzzle.enableSwapping(this);\n                imagePuzzle.enableSwapping($dragElem);\n            }\n        });\n    },\n\n    setImage: function (images, gridSize) {\n        console.log(gridSize);\n        gridSize = gridSize || 8; // If gridSize is null or not passed, default it as 4.\n        console.log(gridSize);\n        var percentage = 100 / (gridSize - 1);\n        var image = images[Math.floor(Math.random() * images.length)];\n        $('#imgTitle').html(image.title);\n        $('#actualImage').attr('src', image.src);\n        $('#sortable').empty();\n        for (var i = 0; i < gridSize * gridSize; i++) {\n            var xpos = (percentage * (i % gridSize)) + '%';\n            var ypos = (percentage * Math.floor(i / gridSize)) + '%';\n            var li = $('<li class=\"item\" data-value=\"' + (i) + '\"></li>').css({\n                'background-image': 'url(' + image.src + ')',\n                'background-size': (gridSize * 100) + '%',\n                'background-position': xpos + ' ' + ypos,\n                'width': 700 / gridSize,\n                'height': 640/ gridSize\n            });\n            $('#sortable').append(li);\n        }\n        $('#sortable').randomize();\n    }\n};\n\nfunction isSorted(arr) {\n    for (var i = 0; i < arr.length - 1; i++) {\n        if (arr[i] != i)\n            return false;\n    }\n    return true;\n}\n$.fn.randomize = function (selector) {\n    var $elems = selector ? $(this).find(selector) : $(this).children(),\n        $parents = $elems.parent();\n\n    $parents.each(function () {\n        $(this).children(selector).sort(function () {\n            return Math.round(Math.random()) - 0.5;\n        }).remove().appendTo(this);\n    });\n    return this;\n};"],"file":"image-puzzle.dev.js"}